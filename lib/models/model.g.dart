// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Stock.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Stock TABLE
class TableStock extends SqfEntityTableBase {
  TableStock() {
    // declare properties of EntityTable
    tableName = 'stocks';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('ticker', DbType.text, isNotNull: false),
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
      SqfEntityFieldBase('price', DbType.real, isNotNull: false),
      SqfEntityFieldBase('variation', DbType.real, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableStock();
  }
}

// Portfolio TABLE
class TablePortfolio extends SqfEntityTableBase {
  TablePortfolio() {
    // declare properties of EntityTable
    tableName = 'portfolios';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePortfolio();
  }
}

// Portfolio_stock TABLE
class TablePortfolio_stock extends SqfEntityTableBase {
  TablePortfolio_stock() {
    // declare properties of EntityTable
    tableName = 'portfolio_stock';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('portfolioId', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('stockId', DbType.integer, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePortfolio_stock();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class DbModel extends SqfEntityModelProvider {
  DbModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    databaseTables = [
      TableStock.getInstance,
      TablePortfolio.getInstance,
      TablePortfolio_stock.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Stock
class Stock {
  Stock(
      {this.id,
      this.ticker,
      this.name,
      this.price,
      this.variation,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Stock.withFields(
      this.ticker, this.name, this.price, this.variation, this.isDeleted) {
    _setDefaultValues();
  }
  Stock.withId(this.id, this.ticker, this.name, this.price, this.variation,
      this.isDeleted) {
    _setDefaultValues();
  }
  Stock.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['ticker'] != null) {
      ticker = o['ticker'] as String;
    }
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['price'] != null) {
      price = double.tryParse(o['price'].toString());
    }
    if (o['variation'] != null) {
      variation = double.tryParse(o['variation'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Stock)
  int id;
  String ticker;
  String name;
  double price;
  double variation;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Stock)

  static const bool _softDeleteActivated = true;
  StockManager __mnStock;

  StockManager get _mnStock {
    return __mnStock = __mnStock ?? StockManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (ticker != null) {
      map['ticker'] = ticker;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (variation != null) {
      map['variation'] = variation;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (ticker != null) {
      map['ticker'] = ticker;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (variation != null) {
      map['variation'] = variation;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Stock]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Stock]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [ticker, name, price, variation, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, ticker, name, price, variation, isDeleted];
  }

  static Future<List<Stock>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Stock.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Stock>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Stock>[];
    try {
      objList = list
          .map((stock) => Stock.fromMap(stock as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Stock.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Stock>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Stock> objList = <Stock>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Stock.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Stock by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Stock if exist, otherwise returns null
  Future<Stock> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Stock obj;
    final data = await _mnStock.getById([id]);
    if (data.length != 0) {
      obj = Stock.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Stock) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnStock.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnStock.update(this);
    }

    return id;
  }

  /// saveAs Stock. Returns a new Primary Key value of Stock

  /// <returns>Returns a new Primary Key value of Stock
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Stock> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Stock> stocks) async {
    // final results = _mnStock.saveAll('INSERT OR REPLACE INTO stocks (id,ticker, name, price, variation,isDeleted)  VALUES (?,?,?,?,?,?)',stocks);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in stocks) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();
    for (int i = 0; i < stocks.length; i++) {
      if (stocks[i].id == null) {
        stocks[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnStock.rawInsert(
              'INSERT OR REPLACE INTO stocks (id,ticker, name, price, variation,isDeleted)  VALUES (?,?,?,?,?,?)',
              [id, ticker, name, price, variation, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true, successMessage: 'Stock id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Stock id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Stock Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Stock>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Stock> stocks) async {
    final results = await _mnStock.rawInsertAll(
        'INSERT OR REPLACE INTO stocks (id,ticker, name, price, variation,isDeleted)  VALUES (?,?,?,?,?,?)',
        stocks);
    return results;
  }

  /// Deletes Stock

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Stock invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnStock
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnStock.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Stock>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Stock invoked (id=$id)');
    {
      return _mnStock.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  StockFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return StockFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  StockFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return StockFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion stock

// region StockField
class StockField extends SearchCriteria {
  StockField(this.stockFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  StockFilterBuilder stockFB;

  StockField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  StockFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, stockFB.parameters, param, SqlSyntax.EQuals,
            stockFB._addedBlocks)
        : setCriteria(pValue, stockFB.parameters, param, SqlSyntax.NotEQuals,
            stockFB._addedBlocks);
    _waitingNot = '';
    stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
        stockFB._addedBlocks.retVal;
    return stockFB;
  }

  StockFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, stockFB.parameters, param, SqlSyntax.EQualsOrNull,
            stockFB._addedBlocks)
        : setCriteria(pValue, stockFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, stockFB._addedBlocks);
    _waitingNot = '';
    stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
        stockFB._addedBlocks.retVal;
    return stockFB;
  }

  StockFilterBuilder isNull() {
    stockFB._addedBlocks = setCriteria(
        0,
        stockFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        stockFB._addedBlocks);
    _waitingNot = '';
    stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
        stockFB._addedBlocks.retVal;
    return stockFB;
  }

  StockFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      stockFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          stockFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          stockFB._addedBlocks);
      _waitingNot = '';
      stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
          stockFB._addedBlocks.retVal;
    }
    return stockFB;
  }

  StockFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      stockFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          stockFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          stockFB._addedBlocks);
      _waitingNot = '';
      stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
          stockFB._addedBlocks.retVal;
      stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
          stockFB._addedBlocks.retVal;
    }
    return stockFB;
  }

  StockFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      stockFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          stockFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          stockFB._addedBlocks);
      _waitingNot = '';
      stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
          stockFB._addedBlocks.retVal;
    }
    return stockFB;
  }

  StockFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      stockFB._addedBlocks = setCriteria(
          pFirst,
          stockFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          stockFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        stockFB._addedBlocks = setCriteria(pFirst, stockFB.parameters, param,
            SqlSyntax.LessThan, stockFB._addedBlocks);
      } else {
        stockFB._addedBlocks = setCriteria(pFirst, stockFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, stockFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        stockFB._addedBlocks = setCriteria(pLast, stockFB.parameters, param,
            SqlSyntax.GreaterThan, stockFB._addedBlocks);
      } else {
        stockFB._addedBlocks = setCriteria(pLast, stockFB.parameters, param,
            SqlSyntax.LessThanOrEquals, stockFB._addedBlocks);
      }
    }
    _waitingNot = '';
    stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
        stockFB._addedBlocks.retVal;
    return stockFB;
  }

  StockFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, stockFB.parameters, param, SqlSyntax.GreaterThan,
            stockFB._addedBlocks)
        : setCriteria(pValue, stockFB.parameters, param,
            SqlSyntax.LessThanOrEquals, stockFB._addedBlocks);
    _waitingNot = '';
    stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
        stockFB._addedBlocks.retVal;
    return stockFB;
  }

  StockFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, stockFB.parameters, param, SqlSyntax.LessThan,
            stockFB._addedBlocks)
        : setCriteria(pValue, stockFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, stockFB._addedBlocks);
    _waitingNot = '';
    stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
        stockFB._addedBlocks.retVal;
    return stockFB;
  }

  StockFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, stockFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, stockFB._addedBlocks)
        : setCriteria(pValue, stockFB.parameters, param, SqlSyntax.LessThan,
            stockFB._addedBlocks);
    _waitingNot = '';
    stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
        stockFB._addedBlocks.retVal;
    return stockFB;
  }

  StockFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, stockFB.parameters, param,
            SqlSyntax.LessThanOrEquals, stockFB._addedBlocks)
        : setCriteria(pValue, stockFB.parameters, param, SqlSyntax.GreaterThan,
            stockFB._addedBlocks);
    _waitingNot = '';
    stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
        stockFB._addedBlocks.retVal;
    return stockFB;
  }

  StockFilterBuilder inValues(dynamic pValue) {
    stockFB._addedBlocks = setCriteria(
        pValue,
        stockFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        stockFB._addedBlocks);
    _waitingNot = '';
    stockFB._addedBlocks.needEndBlock[stockFB._blockIndex] =
        stockFB._addedBlocks.retVal;
    return stockFB;
  }
}
// endregion StockField

// region StockFilterBuilder
class StockFilterBuilder extends SearchCriteria {
  StockFilterBuilder(Stock obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Stock _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  StockFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  StockFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  StockFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  StockFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  StockFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  StockFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  StockFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  StockFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  StockFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  StockFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  StockFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  StockField setField(StockField field, String colName, DbType dbtype) {
    return StockField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  StockField _id;
  StockField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  StockField _ticker;
  StockField get ticker {
    return _ticker = setField(_ticker, 'ticker', DbType.text);
  }

  StockField _name;
  StockField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  StockField _price;
  StockField get price {
    return _price = setField(_price, 'price', DbType.real);
  }

  StockField _variation;
  StockField get variation {
    return _variation = setField(_variation, 'variation', DbType.real);
  }

  StockField _isDeleted;
  StockField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Stock._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Stock> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Stock._softDeleteActivated && !hardDelete) {
      r = await _obj._mnStock.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnStock.delete(qparams);
    }
    return r;
  }

  /// Recover List<Stock> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Stock bulk invoked');
    return _obj._mnStock.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from stocks ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnStock.updateBatch(qparams, values);
  }

  /// This method always returns Stock Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Stock>
  Future<Stock> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnStock.toList(qparams);
    final data = await objFuture;
    Stock obj;
    if (data.isNotEmpty) {
      obj = Stock.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Stock]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) stockCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final stocksFuture = await _obj._mnStock.toList(qparams);
    final int count = stocksFuture[0]['CNT'] as int;
    if (stockCount != null) {
      stockCount(count);
    }
    return count;
  }

  /// This method returns List<Stock> [Stock]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Stock>
  Future<List<Stock>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Stock> stocksData = await Stock.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return stocksData;
  }

  /// This method returns Json String [Stock]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Stock]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Stock]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnStock.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Stock]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM stocks WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnStock.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Stock]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnStock.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Stock.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnStock.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion StockFilterBuilder

// region StockFields
class StockFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fTicker;
  static TableField get ticker {
    return _fTicker =
        _fTicker ?? SqlSyntax.setField(_fTicker, 'ticker', DbType.text);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fPrice;
  static TableField get price {
    return _fPrice =
        _fPrice ?? SqlSyntax.setField(_fPrice, 'price', DbType.real);
  }

  static TableField _fVariation;
  static TableField get variation {
    return _fVariation = _fVariation ??
        SqlSyntax.setField(_fVariation, 'variation', DbType.real);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion StockFields

//region StockManager
class StockManager extends SqfEntityProvider {
  StockManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'stocks';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion StockManager
// region Portfolio
class Portfolio {
  Portfolio({this.id, this.name, this.isDeleted}) {
    _setDefaultValues();
  }
  Portfolio.withFields(this.name, this.isDeleted) {
    _setDefaultValues();
  }
  Portfolio.withId(this.id, this.name, this.isDeleted) {
    _setDefaultValues();
  }
  Portfolio.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Portfolio)
  int id;
  String name;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Portfolio)

  static const bool _softDeleteActivated = true;
  PortfolioManager __mnPortfolio;

  PortfolioManager get _mnPortfolio {
    return __mnPortfolio = __mnPortfolio ?? PortfolioManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Portfolio]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Portfolio]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, isDeleted];
  }

  static Future<List<Portfolio>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Portfolio.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Portfolio>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Portfolio>[];
    try {
      objList = list
          .map((portfolio) =>
              Portfolio.fromMap(portfolio as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Portfolio.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Portfolio>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Portfolio> objList = <Portfolio>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Portfolio.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Portfolio by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Portfolio if exist, otherwise returns null
  Future<Portfolio> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Portfolio obj;
    final data = await _mnPortfolio.getById([id]);
    if (data.length != 0) {
      obj = Portfolio.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Portfolio) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnPortfolio.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnPortfolio.update(this);
    }

    return id;
  }

  /// saveAs Portfolio. Returns a new Primary Key value of Portfolio

  /// <returns>Returns a new Primary Key value of Portfolio
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Portfolio> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Portfolio> portfolios) async {
    // final results = _mnPortfolio.saveAll('INSERT OR REPLACE INTO portfolios (id,name,isDeleted)  VALUES (?,?,?)',portfolios);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in portfolios) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();
    for (int i = 0; i < portfolios.length; i++) {
      if (portfolios[i].id == null) {
        portfolios[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnPortfolio.rawInsert(
              'INSERT OR REPLACE INTO portfolios (id,name,isDeleted)  VALUES (?,?,?)',
              [id, name, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Portfolio id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Portfolio id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Portfolio Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Portfolio>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Portfolio> portfolios) async {
    final results = await _mnPortfolio.rawInsertAll(
        'INSERT OR REPLACE INTO portfolios (id,name,isDeleted)  VALUES (?,?,?)',
        portfolios);
    return results;
  }

  /// Deletes Portfolio

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Portfolio invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnPortfolio
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPortfolio.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Portfolio>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Portfolio invoked (id=$id)');
    {
      return _mnPortfolio.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  PortfolioFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return PortfolioFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  PortfolioFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return PortfolioFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion portfolio

// region PortfolioField
class PortfolioField extends SearchCriteria {
  PortfolioField(this.portfolioFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  PortfolioFilterBuilder portfolioFB;

  PortfolioField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  PortfolioFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    portfolioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolioFB.parameters, param, SqlSyntax.EQuals,
            portfolioFB._addedBlocks)
        : setCriteria(pValue, portfolioFB.parameters, param,
            SqlSyntax.NotEQuals, portfolioFB._addedBlocks);
    _waitingNot = '';
    portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
        portfolioFB._addedBlocks.retVal;
    return portfolioFB;
  }

  PortfolioFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    portfolioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolioFB.parameters, param,
            SqlSyntax.EQualsOrNull, portfolioFB._addedBlocks)
        : setCriteria(pValue, portfolioFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, portfolioFB._addedBlocks);
    _waitingNot = '';
    portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
        portfolioFB._addedBlocks.retVal;
    return portfolioFB;
  }

  PortfolioFilterBuilder isNull() {
    portfolioFB._addedBlocks = setCriteria(
        0,
        portfolioFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        portfolioFB._addedBlocks);
    _waitingNot = '';
    portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
        portfolioFB._addedBlocks.retVal;
    return portfolioFB;
  }

  PortfolioFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      portfolioFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          portfolioFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          portfolioFB._addedBlocks);
      _waitingNot = '';
      portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
          portfolioFB._addedBlocks.retVal;
    }
    return portfolioFB;
  }

  PortfolioFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      portfolioFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          portfolioFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          portfolioFB._addedBlocks);
      _waitingNot = '';
      portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
          portfolioFB._addedBlocks.retVal;
      portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
          portfolioFB._addedBlocks.retVal;
    }
    return portfolioFB;
  }

  PortfolioFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      portfolioFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          portfolioFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          portfolioFB._addedBlocks);
      _waitingNot = '';
      portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
          portfolioFB._addedBlocks.retVal;
    }
    return portfolioFB;
  }

  PortfolioFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      portfolioFB._addedBlocks = setCriteria(
          pFirst,
          portfolioFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          portfolioFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        portfolioFB._addedBlocks = setCriteria(pFirst, portfolioFB.parameters,
            param, SqlSyntax.LessThan, portfolioFB._addedBlocks);
      } else {
        portfolioFB._addedBlocks = setCriteria(pFirst, portfolioFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, portfolioFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        portfolioFB._addedBlocks = setCriteria(pLast, portfolioFB.parameters,
            param, SqlSyntax.GreaterThan, portfolioFB._addedBlocks);
      } else {
        portfolioFB._addedBlocks = setCriteria(pLast, portfolioFB.parameters,
            param, SqlSyntax.LessThanOrEquals, portfolioFB._addedBlocks);
      }
    }
    _waitingNot = '';
    portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
        portfolioFB._addedBlocks.retVal;
    return portfolioFB;
  }

  PortfolioFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    portfolioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolioFB.parameters, param,
            SqlSyntax.GreaterThan, portfolioFB._addedBlocks)
        : setCriteria(pValue, portfolioFB.parameters, param,
            SqlSyntax.LessThanOrEquals, portfolioFB._addedBlocks);
    _waitingNot = '';
    portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
        portfolioFB._addedBlocks.retVal;
    return portfolioFB;
  }

  PortfolioFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    portfolioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolioFB.parameters, param, SqlSyntax.LessThan,
            portfolioFB._addedBlocks)
        : setCriteria(pValue, portfolioFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, portfolioFB._addedBlocks);
    _waitingNot = '';
    portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
        portfolioFB._addedBlocks.retVal;
    return portfolioFB;
  }

  PortfolioFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    portfolioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolioFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, portfolioFB._addedBlocks)
        : setCriteria(pValue, portfolioFB.parameters, param, SqlSyntax.LessThan,
            portfolioFB._addedBlocks);
    _waitingNot = '';
    portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
        portfolioFB._addedBlocks.retVal;
    return portfolioFB;
  }

  PortfolioFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    portfolioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolioFB.parameters, param,
            SqlSyntax.LessThanOrEquals, portfolioFB._addedBlocks)
        : setCriteria(pValue, portfolioFB.parameters, param,
            SqlSyntax.GreaterThan, portfolioFB._addedBlocks);
    _waitingNot = '';
    portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
        portfolioFB._addedBlocks.retVal;
    return portfolioFB;
  }

  PortfolioFilterBuilder inValues(dynamic pValue) {
    portfolioFB._addedBlocks = setCriteria(
        pValue,
        portfolioFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        portfolioFB._addedBlocks);
    _waitingNot = '';
    portfolioFB._addedBlocks.needEndBlock[portfolioFB._blockIndex] =
        portfolioFB._addedBlocks.retVal;
    return portfolioFB;
  }
}
// endregion PortfolioField

// region PortfolioFilterBuilder
class PortfolioFilterBuilder extends SearchCriteria {
  PortfolioFilterBuilder(Portfolio obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Portfolio _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  PortfolioFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  PortfolioFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  PortfolioFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  PortfolioFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  PortfolioFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  PortfolioFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  PortfolioFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  PortfolioFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PortfolioFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PortfolioFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  PortfolioFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  PortfolioField setField(PortfolioField field, String colName, DbType dbtype) {
    return PortfolioField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  PortfolioField _id;
  PortfolioField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  PortfolioField _name;
  PortfolioField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  PortfolioField _isDeleted;
  PortfolioField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Portfolio._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Portfolio> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Portfolio._softDeleteActivated && !hardDelete) {
      r = await _obj._mnPortfolio.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnPortfolio.delete(qparams);
    }
    return r;
  }

  /// Recover List<Portfolio> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Portfolio bulk invoked');
    return _obj._mnPortfolio.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from portfolios ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnPortfolio.updateBatch(qparams, values);
  }

  /// This method always returns Portfolio Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Portfolio>
  Future<Portfolio> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnPortfolio.toList(qparams);
    final data = await objFuture;
    Portfolio obj;
    if (data.isNotEmpty) {
      obj = Portfolio.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Portfolio]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) portfolioCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final portfoliosFuture = await _obj._mnPortfolio.toList(qparams);
    final int count = portfoliosFuture[0]['CNT'] as int;
    if (portfolioCount != null) {
      portfolioCount(count);
    }
    return count;
  }

  /// This method returns List<Portfolio> [Portfolio]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Portfolio>
  Future<List<Portfolio>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Portfolio> portfoliosData = await Portfolio.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return portfoliosData;
  }

  /// This method returns Json String [Portfolio]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Portfolio]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Portfolio]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnPortfolio.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Portfolio]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM portfolios WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnPortfolio.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Portfolio]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnPortfolio.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Portfolio.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnPortfolio.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PortfolioFilterBuilder

// region PortfolioFields
class PortfolioFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion PortfolioFields

//region PortfolioManager
class PortfolioManager extends SqfEntityProvider {
  PortfolioManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'portfolios';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion PortfolioManager
// region Portfolio_stock
class Portfolio_stock {
  Portfolio_stock({this.id, this.portfolioId, this.stockId, this.isDeleted}) {
    _setDefaultValues();
  }
  Portfolio_stock.withFields(this.portfolioId, this.stockId, this.isDeleted) {
    _setDefaultValues();
  }
  Portfolio_stock.withId(
      this.id, this.portfolioId, this.stockId, this.isDeleted) {
    _setDefaultValues();
  }
  Portfolio_stock.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['portfolioId'] != null) {
      portfolioId = int.tryParse(o['portfolioId'].toString());
    }
    if (o['stockId'] != null) {
      stockId = int.tryParse(o['stockId'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Portfolio_stock)
  int id;
  int portfolioId;
  int stockId;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Portfolio_stock)

  static const bool _softDeleteActivated = true;
  Portfolio_stockManager __mnPortfolio_stock;

  Portfolio_stockManager get _mnPortfolio_stock {
    return __mnPortfolio_stock =
        __mnPortfolio_stock ?? Portfolio_stockManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (portfolioId != null) {
      map['portfolioId'] = portfolioId;
    }

    if (stockId != null) {
      map['stockId'] = stockId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (portfolioId != null) {
      map['portfolioId'] = portfolioId;
    }

    if (stockId != null) {
      map['stockId'] = stockId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Portfolio_stock]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Portfolio_stock]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [portfolioId, stockId, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, portfolioId, stockId, isDeleted];
  }

  static Future<List<Portfolio_stock>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Portfolio_stock.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Portfolio_stock>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Portfolio_stock>[];
    try {
      objList = list
          .map((portfolio_stock) =>
              Portfolio_stock.fromMap(portfolio_stock as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Portfolio_stock.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Portfolio_stock>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Portfolio_stock> objList = <Portfolio_stock>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Portfolio_stock.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Portfolio_stock by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Portfolio_stock if exist, otherwise returns null
  Future<Portfolio_stock> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Portfolio_stock obj;
    final data = await _mnPortfolio_stock.getById([id]);
    if (data.length != 0) {
      obj = Portfolio_stock.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Portfolio_stock) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnPortfolio_stock.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnPortfolio_stock.update(this);
    }

    return id;
  }

  /// saveAs Portfolio_stock. Returns a new Primary Key value of Portfolio_stock

  /// <returns>Returns a new Primary Key value of Portfolio_stock
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Portfolio_stock> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Portfolio_stock> portfolio_stocks) async {
    // final results = _mnPortfolio_stock.saveAll('INSERT OR REPLACE INTO portfolio_stock (id,portfolioId, stockId,isDeleted)  VALUES (?,?,?,?)',portfolio_stocks);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in portfolio_stocks) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();
    for (int i = 0; i < portfolio_stocks.length; i++) {
      if (portfolio_stocks[i].id == null) {
        portfolio_stocks[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnPortfolio_stock.rawInsert(
              'INSERT OR REPLACE INTO portfolio_stock (id,portfolioId, stockId,isDeleted)  VALUES (?,?,?,?)',
              [id, portfolioId, stockId, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Portfolio_stock id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Portfolio_stock id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Portfolio_stock Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Portfolio_stock>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<Portfolio_stock> portfolio_stocks) async {
    final results = await _mnPortfolio_stock.rawInsertAll(
        'INSERT OR REPLACE INTO portfolio_stock (id,portfolioId, stockId,isDeleted)  VALUES (?,?,?,?)',
        portfolio_stocks);
    return results;
  }

  /// Deletes Portfolio_stock

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Portfolio_stock invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnPortfolio_stock
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPortfolio_stock.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Portfolio_stock>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Portfolio_stock invoked (id=$id)');
    {
      return _mnPortfolio_stock.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  Portfolio_stockFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Portfolio_stockFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Portfolio_stockFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Portfolio_stockFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion portfolio_stock

// region Portfolio_stockField
class Portfolio_stockField extends SearchCriteria {
  Portfolio_stockField(this.portfolio_stockFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  Portfolio_stockFilterBuilder portfolio_stockFB;

  Portfolio_stockField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Portfolio_stockFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    portfolio_stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.EQuals, portfolio_stockFB._addedBlocks)
        : setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.NotEQuals, portfolio_stockFB._addedBlocks);
    _waitingNot = '';
    portfolio_stockFB._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
        portfolio_stockFB._addedBlocks.retVal;
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    portfolio_stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.EQualsOrNull, portfolio_stockFB._addedBlocks)
        : setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, portfolio_stockFB._addedBlocks);
    _waitingNot = '';
    portfolio_stockFB._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
        portfolio_stockFB._addedBlocks.retVal;
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder isNull() {
    portfolio_stockFB._addedBlocks = setCriteria(
        0,
        portfolio_stockFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        portfolio_stockFB._addedBlocks);
    _waitingNot = '';
    portfolio_stockFB._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
        portfolio_stockFB._addedBlocks.retVal;
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      portfolio_stockFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          portfolio_stockFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          portfolio_stockFB._addedBlocks);
      _waitingNot = '';
      portfolio_stockFB
              ._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
          portfolio_stockFB._addedBlocks.retVal;
    }
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      portfolio_stockFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          portfolio_stockFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          portfolio_stockFB._addedBlocks);
      _waitingNot = '';
      portfolio_stockFB
              ._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
          portfolio_stockFB._addedBlocks.retVal;
      portfolio_stockFB
              ._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
          portfolio_stockFB._addedBlocks.retVal;
    }
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      portfolio_stockFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          portfolio_stockFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          portfolio_stockFB._addedBlocks);
      _waitingNot = '';
      portfolio_stockFB
              ._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
          portfolio_stockFB._addedBlocks.retVal;
    }
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      portfolio_stockFB._addedBlocks = setCriteria(
          pFirst,
          portfolio_stockFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          portfolio_stockFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        portfolio_stockFB._addedBlocks = setCriteria(
            pFirst,
            portfolio_stockFB.parameters,
            param,
            SqlSyntax.LessThan,
            portfolio_stockFB._addedBlocks);
      } else {
        portfolio_stockFB._addedBlocks = setCriteria(
            pFirst,
            portfolio_stockFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            portfolio_stockFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        portfolio_stockFB._addedBlocks = setCriteria(
            pLast,
            portfolio_stockFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            portfolio_stockFB._addedBlocks);
      } else {
        portfolio_stockFB._addedBlocks = setCriteria(
            pLast,
            portfolio_stockFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            portfolio_stockFB._addedBlocks);
      }
    }
    _waitingNot = '';
    portfolio_stockFB._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
        portfolio_stockFB._addedBlocks.retVal;
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    portfolio_stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.GreaterThan, portfolio_stockFB._addedBlocks)
        : setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.LessThanOrEquals, portfolio_stockFB._addedBlocks);
    _waitingNot = '';
    portfolio_stockFB._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
        portfolio_stockFB._addedBlocks.retVal;
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    portfolio_stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.LessThan, portfolio_stockFB._addedBlocks)
        : setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, portfolio_stockFB._addedBlocks);
    _waitingNot = '';
    portfolio_stockFB._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
        portfolio_stockFB._addedBlocks.retVal;
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    portfolio_stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, portfolio_stockFB._addedBlocks)
        : setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.LessThan, portfolio_stockFB._addedBlocks);
    _waitingNot = '';
    portfolio_stockFB._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
        portfolio_stockFB._addedBlocks.retVal;
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    portfolio_stockFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.LessThanOrEquals, portfolio_stockFB._addedBlocks)
        : setCriteria(pValue, portfolio_stockFB.parameters, param,
            SqlSyntax.GreaterThan, portfolio_stockFB._addedBlocks);
    _waitingNot = '';
    portfolio_stockFB._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
        portfolio_stockFB._addedBlocks.retVal;
    return portfolio_stockFB;
  }

  Portfolio_stockFilterBuilder inValues(dynamic pValue) {
    portfolio_stockFB._addedBlocks = setCriteria(
        pValue,
        portfolio_stockFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        portfolio_stockFB._addedBlocks);
    _waitingNot = '';
    portfolio_stockFB._addedBlocks.needEndBlock[portfolio_stockFB._blockIndex] =
        portfolio_stockFB._addedBlocks.retVal;
    return portfolio_stockFB;
  }
}
// endregion Portfolio_stockField

// region Portfolio_stockFilterBuilder
class Portfolio_stockFilterBuilder extends SearchCriteria {
  Portfolio_stockFilterBuilder(Portfolio_stock obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Portfolio_stock _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  Portfolio_stockFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Portfolio_stockFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Portfolio_stockFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Portfolio_stockFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Portfolio_stockFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Portfolio_stockFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Portfolio_stockFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Portfolio_stockFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Portfolio_stockFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Portfolio_stockFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Portfolio_stockFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Portfolio_stockField setField(
      Portfolio_stockField field, String colName, DbType dbtype) {
    return Portfolio_stockField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  Portfolio_stockField _id;
  Portfolio_stockField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  Portfolio_stockField _portfolioId;
  Portfolio_stockField get portfolioId {
    return _portfolioId = setField(_portfolioId, 'portfolioId', DbType.integer);
  }

  Portfolio_stockField _stockId;
  Portfolio_stockField get stockId {
    return _stockId = setField(_stockId, 'stockId', DbType.integer);
  }

  Portfolio_stockField _isDeleted;
  Portfolio_stockField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Portfolio_stock._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Portfolio_stock> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Portfolio_stock._softDeleteActivated && !hardDelete) {
      r = await _obj._mnPortfolio_stock.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnPortfolio_stock.delete(qparams);
    }
    return r;
  }

  /// Recover List<Portfolio_stock> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Portfolio_stock bulk invoked');
    return _obj._mnPortfolio_stock.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from portfolio_stock ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnPortfolio_stock.updateBatch(qparams, values);
  }

  /// This method always returns Portfolio_stock Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Portfolio_stock>
  Future<Portfolio_stock> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnPortfolio_stock.toList(qparams);
    final data = await objFuture;
    Portfolio_stock obj;
    if (data.isNotEmpty) {
      obj = Portfolio_stock.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Portfolio_stock]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c) portfolio_stockCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final portfolio_stocksFuture =
        await _obj._mnPortfolio_stock.toList(qparams);
    final int count = portfolio_stocksFuture[0]['CNT'] as int;
    if (portfolio_stockCount != null) {
      portfolio_stockCount(count);
    }
    return count;
  }

  /// This method returns List<Portfolio_stock> [Portfolio_stock]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Portfolio_stock>
  Future<List<Portfolio_stock>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Portfolio_stock> portfolio_stocksData =
        await Portfolio_stock.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return portfolio_stocksData;
  }

  /// This method returns Json String [Portfolio_stock]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Portfolio_stock]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Portfolio_stock]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnPortfolio_stock.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Portfolio_stock]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM portfolio_stock WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnPortfolio_stock.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Portfolio_stock]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnPortfolio_stock.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Portfolio_stock.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnPortfolio_stock.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Portfolio_stockFilterBuilder

// region Portfolio_stockFields
class Portfolio_stockFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fPortfolioId;
  static TableField get portfolioId {
    return _fPortfolioId = _fPortfolioId ??
        SqlSyntax.setField(_fPortfolioId, 'portfolioId', DbType.integer);
  }

  static TableField _fStockId;
  static TableField get stockId {
    return _fStockId =
        _fStockId ?? SqlSyntax.setField(_fStockId, 'stockId', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion Portfolio_stockFields

//region Portfolio_stockManager
class Portfolio_stockManager extends SqfEntityProvider {
  Portfolio_stockManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'portfolio_stock';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion Portfolio_stockManager
class DbModelSequenceManager extends SqfEntityProvider {
  DbModelSequenceManager() : super(DbModel());
}
// END OF ENTITIES
